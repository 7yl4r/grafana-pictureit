{"version":3,"sources":["../src/pictureit_ctrl.js"],"names":["ValueColorMapping","value","colorName","ColorMapping","name","color","Sensor","metric","xlocation","ylocation","format","bgcolor","fontColor","size","bordercolor","visible","renderValue","valueFormatted","valueUnit","displayName","link_url","resolvedLink","rectangular","group","Group","alignment","x","y","sameSize","width","_","MetricsPanelCtrl","getWidth","panelDefaults","colorMappings","colorMappingMap","valueMappings","metricValues","seriesList","series","bgimage","sensors","groups","useLabelGroupings","height","templateSrv","PictureItCtrl","$scope","$injector","defaults","panel","events","on","onInitEditMode","bind","render","onDataReceived","dataList","dataListLength","length","push","target","datapoints","index","splice","lastSensor","sensor","result","ctrl","map","g","alert","JSON","stringify","addEditorTab","scope","elem","attrs","$panelContainer","find","pixelStrToNum","str","parseInt","substr","getGroup","css","metricMap","keyBy","valueMappingsMap","mapping","sensorWidth","font","newValue","Math","max","panelWidth","ylocationStr","toString","xlocationStr","alignSensors","sizeStr","borderRadius","undefined","replace","effectiveName","mValue","valueMapping","colorMapping","sprintf","nextTop","nextX","sensorHeight","renderingCompleted","refreshColorMappings","indexOf","toRemove","templateUrl"],"mappings":"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","file":"pictureit_ctrl.js","sourcesContent":["import _ from \"lodash\";\r\nimport {MetricsPanelCtrl} from \"app/plugins/sdk\";\r\nimport \"./sprintf.js\";\r\nimport \"./angular-sprintf.js\";\r\nimport getWidth from './stringwidth/strwidth.js';\r\n\r\nconst panelDefaults = {\r\n    colorMappings: [],\r\n    colorMappingMap: [],\r\n    valueMappings: [],\r\n    metricValues: [],\r\n    seriesList: [],\r\n    series: [],\r\n    bgimage: '',\r\n    sensors: [],\r\n    groups: [],\r\n    useLabelGroupings: false,\r\n    height: '400px',\r\n    width: '100px',\r\n    templateSrv: null\r\n};\r\n\r\nexport class PictureItCtrl extends MetricsPanelCtrl {\r\n\r\n\r\n    constructor($scope, $injector, templateSrv) {\r\n        super($scope, $injector);\r\n        _.defaults(this.panel, panelDefaults);\r\n        this.templateSrv = templateSrv;\r\n        this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\r\n        this.events.on('panel-initialized', this.render.bind(this));\r\n        this.events.on('data-received', this.onDataReceived.bind(this));\r\n        this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\r\n    }\r\n\r\n    onDataReceived(dataList) {\r\n        var dataListLength = dataList.length;\r\n        this.panel.metricValues = [];\r\n        for (var series = 0; series < dataListLength; series++) {\r\n            this.panel.metricValues.push({\r\n                name: dataList[series].target,\r\n                value: dataList[series].datapoints[dataList[series].datapoints.length - 1][0]\r\n            });\r\n        }\r\n\r\n        this.render();\r\n    }\r\n\r\n    deleteSensor(index) {\r\n        this.panel.sensors.splice(index, 1);\r\n    }\r\n\r\n    addSensor() {\r\n        if (this.panel.sensors.length === 0) {\r\n            this.panel.sensors.push(\r\n                new Sensor('Series Name', 200, 200, '%.2f', 'rgba(0, 0, 0, 0.58)', '#000000', 22, 'rgb(251, 4, 4)', true)\r\n            );\r\n        } else {\r\n            var lastSensor = this.panel.sensors[this.panel.sensors.length - 1];\r\n            this.panel.sensors.push(\r\n                new Sensor(lastSensor.metric, 200, 200, lastSensor.format, lastSensor.bgcolor, lastSensor.color, lastSensor.size, lastSensor.bordercolor, true)\r\n            );\r\n        }\r\n    }\r\n\r\n    moveSensorUp(index) {\r\n        var sensor = this.panel.sensors[index]\r\n        this.panel.sensors.splice(index, 1)\r\n        this.panel.sensors.splice(index-1,0,sensor);\r\n    }\r\n\r\n    moveSensorDown(index) {\r\n        var sensor = this.panel.sensors[index]\r\n        this.panel.sensors.splice(index, 1)\r\n        this.panel.sensors.splice(index+1,0,sensor);\r\n    }\r\n\r\n    deleteGroup(index) {\r\n        this.panel.groups.splice(index, 1);\r\n    }\r\n\r\n    addGroup() {\r\n        this.panel.groups.push(\r\n            new Group('A', \"left\", 200, 200)\r\n        );\r\n    }\r\n\r\n    getAvailableGroups() {\r\n\r\n        var result = ctrl.panel.groups.map(g => g.name);\r\n        alert(\"RESULT: \" + JSON.stringify(result))\r\n        return result;\r\n    }\r\n\r\n    onInitEditMode() {\r\n        this.addEditorTab('Sensor', 'public/plugins/bessler-pictureit-panel/editor.html', 2);\r\n        this.addEditorTab('Color Mapping', 'public/plugins/bessler-pictureit-panel/colors.html', 3);\r\n        this.addEditorTab('Value Color Mapping', 'public/plugins/bessler-pictureit-panel/mappings.html', 4);\r\n    }\r\n\r\n    link(scope, elem, attrs, ctrl) {\r\n        const $panelContainer = elem.find('.panel-container');\r\n\r\n        function pixelStrToNum(str) {\r\n            return parseInt(str.substr(0, str.length - 2));\r\n        }\r\n\r\n        function getGroup(name) {\r\n            for (let group of ctrl.panel.groups) {\r\n                if(group.name == name){\r\n                    return group;\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n\r\n        function render() {\r\n            if (!ctrl.panel.sensors) {\r\n                return;\r\n            }\r\n            let width = pixelStrToNum($panelContainer.css(\"width\"));\r\n            let height = pixelStrToNum($panelContainer.css(\"height\"));\r\n            let metricMap = _.keyBy(ctrl.panel.metricValues, value => value.name);\r\n            let valueMappingsMap = _.keyBy(ctrl.panel.valueMappings, mapping => mapping.value);\r\n\r\n\r\n\r\n            for (let sensor of ctrl.panel.sensors) {\r\n                var sensorWidth = getWidth(sensor.displayName, { font: 'Arial', size: sensor.size }) + 20;\r\n                if(ctrl.panel.useLabelGroupings){\r\n                    var group = getGroup(sensor.group.name)\r\n                    if(group != null && group.sameSize){\r\n                        var newValue = Math.max(group.width, sensorWidth);\r\n                        group.width = newValue;\r\n                        sensor.width = newValue;\r\n                    }else{\r\n                        sensor.panelWidth = sensorWidth + \"px\";  \r\n                        sensor.width = sensorWidth;\r\n                    }\r\n                }else{\r\n                    sensor.panelWidth = sensorWidth + \"px\";  \r\n                    sensor.width = sensorWidth;\r\n                }\r\n            }\r\n\r\n            for (let sensor of ctrl.panel.sensors) {\r\n                if(ctrl.panel.useLabelGroupings && group.sameSize){\r\n                    var group = getGroup(sensor.group.name)\r\n                    if(group != null){\r\n                        sensor.panelWidth = group.width + \"px\";  \r\n                        sensor.width = group.width;\r\n                    }\r\n                }\r\n                sensor.visible = sensor.xlocation < width && sensor.ylocation < height;\r\n                if(!ctrl.panel.useLabelGroupings){\r\n                    sensor.ylocationStr = sensor.ylocation.toString() + \"px\";\r\n                    sensor.xlocationStr = sensor.xlocation.toString() + \"px\";\r\n                }else{\r\n                    alignSensors();\r\n                }\r\n                sensor.sizeStr = sensor.size.toString() + \"px\";\r\n                sensor.bgcolor = 'rgb(64, 64, 64)';\r\n                sensor.bordercolor = 'rgb(64, 64, 64)';\r\n                \r\n                if(sensor.rectangular){\r\n                    sensor.borderRadius = '5%'\r\n                }else{\r\n                    sensor.borderRadius = '50%'\r\n                }\r\n\r\n                if(sensor.link_url != undefined) {\r\n                    sensor.resolvedLink =ctrl.templateSrv.replace(sensor.link_url);\r\n                }\r\n\r\n                //We need to replace possible variables in the sensors name\r\n                var effectiveName = ctrl.templateSrv.replace(sensor.metric);\r\n\r\n                var mValue = metricMap[effectiveName];\r\n                if (mValue === undefined) {\r\n                    mValue = {name: \"dummy\", value: 'null'};\r\n                }\r\n\r\n                var valueMapping = valueMappingsMap[mValue.value];\r\n\r\n                if (valueMapping !== undefined) {\r\n                    let colorMapping = ctrl.panel.colorMappingMap[valueMapping.colorName];\r\n                    if (colorMapping !== undefined) {\r\n                        sensor.bgcolor = colorMapping.color;\r\n                        sensor.bordercolor = colorMapping.color;\r\n                    }\r\n                }\r\n\r\n                //finally format the value itself\r\n                sensor.valueFormatted = sprintf(sensor.format,mValue.value);\r\n            }\r\n        }\r\n\r\n        function alignSensors(){\r\n            for (let group of ctrl.panel.groups) {\r\n                group.nextTop = undefined;\r\n                group.nextX = undefined;\r\n            }\r\n            for (let sensor of ctrl.panel.sensors) {\r\n                var sensorHeight = sensor.size + 30;\r\n                var sensorWidth = sensor.width + 10;\r\n                var group = getGroup(sensor.group.name)\r\n                if(group.alignment == \"left\"){\r\n                    if(group.nextTop === undefined){\r\n                        group.nextTop = group.y;\r\n                    }\r\n                    sensor.ylocationStr = group.nextTop + \"px\";\r\n                    sensor.xlocationStr = group.x + \"px\";\r\n                    group.nextTop = group.nextTop + sensorHeight;\r\n                } else if(group.alignment == \"middle\"){\r\n                    if(group.nextTop === undefined){\r\n                        group.nextTop = group.y;\r\n                    }\r\n                    sensor.ylocationStr = group.nextTop + \"px\";\r\n                    if(group.sameSize){\r\n                        sensor.xlocationStr = (group.x - (group.width/2)) + \"px\";\r\n                    }else{\r\n                        sensor.xlocationStr = (group.x - (sensor.width/2))+ \"px\";\r\n                    }\r\n                    group.nextTop = group.nextTop + sensorHeight;\r\n                } else if(group.alignment == \"right\"){\r\n                    if(group.nextTop === undefined){\r\n                        group.nextTop = group.y;\r\n                    }\r\n                    sensor.ylocationStr = group.nextTop + \"px\";\r\n                    if(group.sameSize){\r\n                        sensor.xlocationStr = (group.x - group.width) + \"px\";\r\n                    }else{\r\n                        sensor.xlocationStr = (group.x - sensor.width)+ \"px\";\r\n                    }\r\n                    group.nextTop = group.nextTop + sensorHeight;\r\n                } else if(group.alignment == \"top\"){\r\n                    if(group.nextX === undefined){\r\n                        group.nextX = group.x;\r\n                    }\r\n                    sensor.xlocationStr = group.nextX + \"px\";\r\n                    sensor.ylocationStr = group.y + \"px\";\r\n                    group.nextX = group.nextX + sensorWidth;\r\n                }    \r\n            }\r\n        }\r\n\r\n        this.events.on('render', function () {\r\n            render();\r\n            ctrl.renderingCompleted();\r\n        });\r\n    }\r\n\r\n    //------------------\r\n    // Color mapping stuff\r\n    //------------------\r\n\r\n    addColorMapping() {\r\n        this.panel.colorMappings.push(new ColorMapping('name', '#FFFFFF'));\r\n        this.refreshColorMappings();\r\n    }\r\n\r\n    removeColorMapping(map) {\r\n        var index = _.indexOf(this.panel.colorMappings, map);\r\n        this.panel.colorMappings.splice(index, 1);\r\n        this.refreshColorMappings();\r\n    }\r\n\r\n    refreshColorMappings() {\r\n        this.panel.colorMappingMap = _.keyBy(this.panel.colorMappings, mapping => mapping.name);\r\n        this.render();\r\n    }\r\n\r\n\r\n    //------------------\r\n    // Mapping stuff\r\n    //------------------\r\n\r\n    addValueMappingMap() {\r\n        this.panel.valueMappings.push(new ValueColorMapping('value', ''));\r\n    }\r\n\r\n    removeValueMappingMap(toRemove) {\r\n        var index = _.indexOf(this.panel.valueMappings, toRemove);\r\n        this.panel.valueMappings.splice(index, 1);\r\n        this.render();\r\n    }\r\n\r\n    /* addRangeMappingMap() {\r\n     this.panel.rangeMappingMap.push({from: '', to: '', text: ''});\r\n     }\r\n\r\n     removeRangeMappingMap(rangeMap) {\r\n     var index = _.indexOf(this.panel.rangeMaps, rangeMap);\r\n     this.panel.rangeMappingMap.splice(index, 1);\r\n     this.render();\r\n     };*/\r\n}\r\n\r\nfunction ValueColorMapping(value,\r\n                           colorName) {\r\n    'use strict';\r\n    this.value = value;\r\n    this.colorName = colorName;\r\n}\r\n\r\n\r\nfunction ColorMapping(name, color) {\r\n    'use strict';\r\n    this.name = name;\r\n    this.color = color;\r\n}\r\n\r\nfunction Sensor(metric,\r\n                xlocation,\r\n                ylocation,\r\n                format,\r\n                bgcolor,\r\n                fontColor,\r\n                size,\r\n                bordercolor,\r\n                visible) {\r\n    'use strict';\r\n    this.metric = metric;\r\n    this.xlocation = xlocation;\r\n    this.ylocation = ylocation;\r\n    this.format = format;\r\n    this.bgcolor = bgcolor;\r\n    this.fontColor = fontColor;\r\n    this.size = size;\r\n    this.bordercolor = bordercolor;\r\n    this.visible = visible;\r\n    this.renderValue = false;\r\n    this.valueFormatted = '';\r\n    this.valueUnit = '';\r\n    this.displayName = '';\r\n    this.link_url = '';\r\n    this.resolvedLink = '';\r\n    this.rectangular = true;\r\n    this.group = 'A';\r\n}\r\n\r\nfunction Group(name,alignment,x,y){\r\n    'use strict';\r\n    this.name = name;\r\n    this.alignment = alignment;\r\n    this.x = x;\r\n    this.y = y;\r\n    this.sameSize = false;\r\n    this.width = 100;\r\n}\r\nPictureItCtrl.templateUrl = 'module.html';\r\n"]}