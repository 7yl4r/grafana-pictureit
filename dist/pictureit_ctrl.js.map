{"version":3,"sources":["../src/pictureit_ctrl.js"],"names":["_","MetricsPanelCtrl","panelDefaults","valueMaps","seriesList","series","bgimage","sensors","height","PictureItCtrl","$scope","$injector","defaults","panel","events","on","onInitEditMode","bind","render","onDataReceived","dataList","dataListLength","length","push","name","target","value","datapoints","index","splice","xlocation","ylocation","format","bgcolor","color","size","bordercolor","lastSensor","addEditorTab","scope","elem","attrs","ctrl","sensorsLength","valueMapsLength","sensor","valueMap","valueFormatted","sprintf","renderingCompleted","templateUrl"],"mappings":"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","file":"pictureit_ctrl.js","sourcesContent":["import _ from 'lodash';\nimport {MetricsPanelCtrl} from 'app/plugins/sdk';\nimport './sprintf.js';\nimport './angular-sprintf.js';\n\nconst panelDefaults = {\n\tvalueMaps: [],\n\tseriesList: [],\n\tseries: [],\n\tbgimage: '',\n\tsensors: [],\n\theight: '400px'\n};\n\nexport class PictureItCtrl extends MetricsPanelCtrl  {\n  \n  \n  constructor($scope, $injector) {\n    super($scope, $injector);\n    _.defaults(this.panel, panelDefaults);\n\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('panel-initialized', this.render.bind(this));\n\tthis.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n  }\n\n  onDataReceived(dataList) {\t\n\tvar dataListLength = dataList.length;\n\tthis.panel.valueMaps=[];\n\tfor (var series=0;series<dataListLength;series++) {\t\t\n\t\tthis.panel.valueMaps.push({name:dataList[series].target,value:dataList[series].datapoints[dataList[series].datapoints.length-1][0]});\n\t}\n\t\n    this.render();\n  }\n  \n  deleteSensor(index) {\n\tthis.panel.sensors.splice(index,1);\n  }\n  \n  addSensor() {\n\tif (this.panel.sensors.length==0)\n\t\tthis.panel.sensors.push({name: 'A-series', xlocation: '200px',ylocation: '200px',format: '%.2f',bgcolor:'rgba(0, 0, 0, 0.58)',color:'#FFFFFF',size:'22px', bordercolor:'rgb(251, 4, 4)'});\n\telse {\n\t\tvar lastSensor=this.panel.sensors[this.panel.sensors.length-1];\n\t\n\t\tthis.panel.sensors.push({name: lastSensor.name, xlocation: '200px',ylocation: '200px',format: lastSensor.format,bgcolor:lastSensor.bgcolor,color:lastSensor.color,size:lastSensor.size, bordercolor:lastSensor.bordercolor});\n\t}\n  }\n  \n  onInitEditMode() {\n    this.addEditorTab('Options', 'public/plugins/grafana-pictureit/editor.html', 2);\n  }\n\t\n  link(scope, elem, attrs, ctrl) {\n    var sensors;\n\tvar valueMaps;\n\n    function render() {\n      if (!ctrl.panel.sensors) { return; }\n\t  \n      sensors = ctrl.panel.sensors;\t  \n\t  valueMaps = ctrl.panel.valueMaps;\n\t  \n\t  var sensorsLength = sensors.length;\n\t  var valueMapsLength = valueMaps.length;\n\t  \n\t  for (var sensor=0;sensor<sensorsLength;sensor++) {\n\t\tfor (var valueMap=0;valueMap<valueMapsLength;valueMap++) {\t\t\n\t\t\tif (sensors[sensor].name==valueMaps[valueMap].name) {\n\t\t\t\tsensors[sensor].valueFormatted=sprintf(sensors[sensor].format,valueMaps[valueMap].value);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t  }\n    }\n\n    this.events.on('render', function() {\n      render();\n      ctrl.renderingCompleted();\n    });\n  }\n}\n\nPictureItCtrl.templateUrl = 'module.html';\n"]}