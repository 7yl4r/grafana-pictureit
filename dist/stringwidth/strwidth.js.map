{"version":3,"sources":["../../src/stringwidth/strwidth.js"],"names":["deburr","widthsMap","settingsDefaults","font","size","getWidth","string","settings","sett","toLowerCase","variant","bold","italic","available","Object","keys","indexOf","Error","join","totalWidth","split","forEach","char","test","widths","x","width"],"mappings":";;;;;;;;AAEOA,Y;;AACAC,e;;;AAEDC,sB,GAAmB,EAAEC,MAAM,OAAR,EAAiBC,MAAM,GAAvB,E;;AAEnBC,c,GAAW,SAAXA,QAAW,CAACC,MAAD,EAASC,QAAT,EAAsB;AACrC,YAAMC,OAAOD,QAAb;AACA,YAAMJ,OAAOK,KAAKL,IAAL,CAAUM,WAAV,EAAb;AACA,YAAML,OAAOI,KAAKJ,IAAlB;AACA,YAAMM,UAAU,KAAKF,KAAKG,IAAL,GAAY,CAAZ,GAAgB,CAArB,KAA2BH,KAAKI,MAAL,GAAc,CAAd,GAAkB,CAA7C,CAAhB;AACA,YAAMC,YAAYC,OAAOC,IAAP,CAAYd,SAAZ,CAAlB;AACA,YAAIY,UAAUG,OAAV,CAAkBb,IAAlB,MAA4B,CAAC,CAAjC,EAAoC;AAClC,gBAAM,IAAIc,KAAJ,uDAA8DJ,UAAUK,IAAV,CAAe,IAAf,CAA9D,CAAN;AACD;AACD,YAAIC,aAAa,CAAjB;AACAnB,eAAOM,MAAP,EAAec,KAAf,CAAqB,EAArB,EAAyBC,OAAzB,CAAiC,UAACC,IAAD,EAAU;AACzC,cAAI,cAAcC,IAAd,CAAmBD,IAAnB,CAAJ,EAA8B;AAAE;AAC9B,mBAAO,IAAP;AACD;AACD;AACA,cAAME,SAASvB,UAAUE,IAAV,EAAgBmB,IAAhB,KAAyBrB,UAAUE,IAAV,EAAgBsB,CAAxD;AACA,cAAMC,QAAQF,OAAOd,OAAP,CAAd;AACAS,wBAAcO,KAAd;AACA,iBAAO,IAAP;AACD,SATD;AAUA,eAAOP,cAAcf,OAAO,GAArB,CAAP;AACD,O;;yBAEcC,Q","file":"strwidth.js","sourcesContent":["\n//import deburr from 'lodash.deburr';\nimport deburr from \"./deburr.js\";\nimport widthsMap from './widthsMap.js';\n\nconst settingsDefaults = { font: 'Arial', size: 100 };\n\nconst getWidth = (string, settings) => {\n  const sett = settings;\n  const font = sett.font.toLowerCase();\n  const size = sett.size;\n  const variant = 0 + (sett.bold ? 1 : 0) + (sett.italic ? 2 : 0);\n  const available = Object.keys(widthsMap);\n  if (available.indexOf(font) === -1) {\n    throw new Error(`This font is not supported. Supported fonts are: ${available.join(', ')}`);\n  }\n  let totalWidth = 0;\n  deburr(string).split('').forEach((char) => {\n    if (/[\\x00-\\x1F]/.test(char)) { // non-printable character\n      return true;\n    }\n    // use width of 'x' as fallback for unregistered char\n    const widths = widthsMap[font][char] || widthsMap[font].x;\n    const width = widths[variant];\n    totalWidth += width;\n    return true;\n  });\n  return totalWidth * (size / 100);\n};\n\nexport default getWidth;"]}